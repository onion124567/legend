{"version":3,"sources":["assets/scripts/AIHelper.js"],"names":["pokerWeight","LEFT_WIN","RIGHT_WIN","AIHelper","checkUserCanSend","gameHost","roundHost","userPokerObj","willSendCard","Array","isArray","length","console","log","targetArray","selectArrayFrom","hostArray","flag1","indexOf","flag2","roundProgram","onUserPlayCallBack","onRoundCallBack","roundOverCallBack","winLocal","sendArray","pokers","intGetType","orgNum","i","currentPlayer","push","bigger","sumSocer","winnerPosition","item","content","intGetContent","PokerUtil","quaryIsSocer","result","comparePoker","sendAIHostCard","gamehost","cardArray","sendCardIndexs","type","substring","value","isHost","quaryIsHost","sendCard","sendValue","compareSinglePokerBigger","sendAIFollowCard","userCard","pokerObj","error","secondLogic","sendThridPoker","sendForthPoker","selectSingleBigerPoker","firstCard","secondCard","selectSocerPoker","thridCard","targetPoker","cardValue","typeValue","contentValue","array","total","isA","pokerArray","selectScoerFromArray","type1Array","type2Array","type3Array","type4Array","removePokerFromArray","pokerNum","index","splice","Math","floor","strGetType","strGetContent","isRealNum","val","isNaN"],"mappings":"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","sourceRoot":"/","sourcesContent":["import PokerUtil from \"./PokerUtil\";\n\nlet pokerWeight = [4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 3, 5, 16, 17, 18];//主5为18\nlet LEFT_WIN = -1;\nlet RIGHT_WIN = 1;\nexport default class AIHelper {\n\n    // {\n    //     type1Array:type1Array,\n    //     type2Array:type2Array,\n    //     type3Array:type3Array,\n    //     type4Array:type4Array,\n    //     hostArray:hostArray,\n    //     total:total\n    // }\n    /**\n     * 检测用户出的牌是否合法\n     * @param gameHost\n     * @param roundHost\n     * @param userCard\n     * @param cardArray\n     */\n    checkUserCanSend(gameHost, roundHost, userPokerObj, willSendCard) {\n        if (Array.isArray(willSendCard)) {\n            if (willSendCard.length === 1) {\n                willSendCard = willSendCard[0];\n            } else {\n                //暂时不支持\n                console.log(\"onion\", \"暂时不支持出对====\");\n                return false;\n            }\n\n        }\n        if (!roundHost) {\n            //没有本轮主，玩家头一个出牌\n            return true;\n        }\n        if (gameHost == roundHost) {\n            let targetArray = this.selectArrayFrom(true, roundHost, userPokerObj);\n            //调主\n            if (userPokerObj.hostArray.length > 0 || targetArray.length > 0) {\n                //有主牌必须出主牌\n                let flag1 = userPokerObj.hostArray.indexOf(willSendCard) !== -1;\n                let flag2 = targetArray.indexOf(willSendCard) !== -1;\n                return flag2 || flag1;\n            }\n            //没主了随便出\n        } else {\n            //花色相同可以出\n            let targetArray = this.selectArrayFrom(true, roundHost, userPokerObj);\n            if (targetArray.length > 0) {\n                return targetArray.indexOf(willSendCard) !== -1;\n            }\n            //无roundHost花色可以出\n\n        }\n        //出副牌时，有副牌必须出副牌\n        return true;\n\n\n    }\n\n    /**\n     * 游戏每轮逻辑，\n     * 赢家出牌，确定本轮主\n     * 下家出牌 调sendAIFollowCard\n     * 4家都出完结算，积分计算，结束本轮，返回积分\n     * @param onRoundCallBack  回调 该相应玩家出牌\n     * @param winLocal 优先出牌方 索引从0开始\n     * @param gameHost 当前游戏主\n     */\n    roundProgram(onUserPlayCallBack, onRoundCallBack, roundOverCallBack, winLocal, gameHost, sendArray) {\n        let roundHost = null;\n        console.log(\"onion\",\"轮次逻辑\"+winLocal+\"/\"+sendArray);\n        if (!sendArray || sendArray.length === 0) {\n            sendArray = [];//本轮出的牌\n        } else {\n            let pokers = sendArray[0];\n            \n            if(Array.isArray(pokers)&&pokers.length===1){\n                pokers=pokers[0];\n            }\n         \n            if (Array.isArray(pokers)) {\n                roundHost = this.intGetType(pokers[0]);\n                console.log(\"onion\", \"暂不支持出对\");\n                return;\n            } else {\n                roundHost = this.intGetType(pokers);\n            }\n           \n        }\n      \n        let orgNum=sendArray.length;\n        for (let i = orgNum; i <= 4 - orgNum; i++) {\n            let currentPlayer = (winLocal + i) % 4;\n            if (currentPlayer == 0) {\n                onUserPlayCallBack(gameHost, roundHost, sendArray, currentPlayer);\n                return;\n            }\n            let pokers = onRoundCallBack(gameHost, roundHost, sendArray, currentPlayer);\n           \n            if (sendArray.length == 0) {\n                if (Array.isArray(pokers)) {\n                    roundHost = this.intGetType(pokers[0]);\n                    console.log(\"onion\", \"暂不支持出对\");\n                    return;\n                } else {\n                    roundHost = this.intGetType(pokers);\n                }\n            }\n            sendArray.push(pokers);\n            console.log(\"onion\",\"轮次迭代\"+winLocal+\"/\"+pokers+\"数组\"+sendArray);\n        }\n        console.log(\"onion\",\"跳出循环\"+winLocal);\n        let bigger = null;\n        let sumSocer = 0;\n        let winnerPosition = 0;\n        //判断哪方牌大\n        for (let i = 0; i < sendArray.length; i++) {\n            let item = sendArray[i];\n            let content = this.intGetContent(item);\n            sumSocer += PokerUtil.quaryIsSocer(content);\n            if (bigger == null) {\n                bigger = item;\n                winnerPosition = i;\n                continue\n            }\n            let result = PokerUtil.comparePoker(gameHost, roundHost, item, bigger);\n            if (result == LEFT_WIN) {\n                bigger = item;\n                winnerPosition = i;\n            }\n        }\n        winnerPosition += winLocal;\n        winnerPosition = winnerPosition % 4;\n        if (winnerPosition == 0 || winnerPosition == 2) {\n            //加分\n        } else {\n            sumSocer = 0;\n        }\n        roundOverCallBack(winnerPosition, sumSocer);\n    }\n\n    /**\n     * 先手电脑逻辑\n     * 普通打法：\n     * 有副出最大的副牌 或者副牌对\n     * 其次出最小主牌，不调主对\n     * 最后一轮出主对 或主\n     * 主应该在后面\n     * @param gameHost 主\n     * @param cardArray  当前手牌\n     */\n    sendAIHostCard(gamehost, cardArray) {\n        let sendCardIndexs = [];\n        for (let i = 0; i < cardArray.length; i++) {\n            let type = cardArray[i].substring(2);\n            let value = cardArray[i].substring(0, 2);\n            let isHost = type == gamehost || PokerUtil.quaryIsHost(value);\n            if (!isHost) {\n                if (sendCardIndexs.length === 0) {\n                    sendCardIndexs.push(i);\n                } else {\n                    if (cardArray[sendCardIndexs[0]] == cardArray[i]) {\n                        sendCardIndexs.push(i);\n                        break;\n                    }\n                    let sendCard = cardArray[sendCardIndexs[0]];\n                    let sendValue = sendCard.substring(0, 2);\n                    let result = PokerUtil.compareSinglePokerBigger(sendValue, value);\n                    if (result = RIGHT_WIN) {\n                        sendCard = value;\n                    }\n                }\n            } else {\n                if (sendCardIndexs.length === 0) {\n                    //没有副牌了\n                    sendCardIndexs.push(i);\n                } else {\n                    if (cardArray[sendCardIndexs[0]] == cardArray[i]) {\n                        sendCardIndexs.push(i);\n                        break;\n                    }\n                    let sendCard = cardArray[sendCardIndexs[0]];\n                    let sendValue = sendCard.substring(0, 2);\n                    let result = PokerUtil.compareSinglePokerBigger(sendValue, value);\n                    if (result = LEFT_WIN) {\n                        sendCard = value;\n                    }\n                }\n            }\n        }\n        return sendCardIndexs;\n\n    }\n\n    /**\n     * 后手电脑逻辑\n     * 判断当前谁大，队友大出分，队友小出小牌。\n     * 无牌出最小副牌\n     *\n     * @param gameHost  游戏主\n     * @param roundHost 本轮主\n     * @param userCard  三方所出的牌\n     * @param cardArray  自己剩余的牌\n     */\n    sendAIFollowCard(gameHost, roundHost, userCard, pokerObj) {\n        switch (userCard.length) {\n            case 0://自己是首家 理论上不存在，应该调sendAIHostCard\n                console.error(\"onion\", \"error 后手电脑调用了sendAIFollowCard 应该调用 sendAIHostCard \");\n                break;\n\n            case 1://尽量出大牌\n                return this.secondLogic(gameHost, roundHost, userCard, pokerObj);\n            case 2://\n                return this.sendThridPoker(gameHost, roundHost, userCard, pokerObj);\n                case 3://\n                return this.sendForthPoker(gameHost, roundHost, userCard, pokerObj);\n        }\n\n    }\n\n    secondLogic(gameHost, roundHost, userCard, pokerObj) {\n        if (userCard[0].length > 1) {\n            //出对的逻辑\n        } else {\n            return this.selectSingleBigerPoker(gameHost, roundHost, userCard, pokerObj);\n\n        }\n    }\n\n    /**\n     * 第三手电脑\n     * 判断谁出的大,尝试盖过一手\n     */\n    sendThridPoker(gameHost, roundHost, userCard, pokerObj) {\n        let firstCard = userCard[0];\n        let secondCard = userCard[1];\n\n        let result = PokerUtil.comparePoker(gameHost, roundHost, firstCard, secondCard);\n        if (result === RIGHT_WIN) {\n            //对家大，尝试出分或小牌\n            return this.selectSocerPoker(gameHost, roundHost, firstCard, pokerObj);\n        } else {\n            //出最大牌，尝试压过firstCard 最大的牌也压不过就出小牌\n            //TODO 可以节约，出仅压过对方的大牌\n            return this.selectSingleBigerPoker(gameHost, roundHost, firstCard, pokerObj);\n        }\n\n\n    }\n\n    /**\n     * 四手电脑\n     */\n    sendForthPoker(gameHost, roundHost, userCard, pokerObj) {\n        let firstCard = userCard[0];\n        let secondCard = userCard[1];\n        let thridCard = userCard[2];\n        let result = PokerUtil.comparePoker(firstCard, secondCard);\n        if (result === RIGHT_WIN) {\n            result = PokerUtil.comparePoker(thridCard, secondCard);\n        }\n        if (result === RIGHT_WIN) {\n             //对家大，尝试出分或小牌\n             return this.selectSocerPoker(gameHost, roundHost, firstCard, pokerObj);\n        } else {\n            //出最大牌，尝试压过firstCard 最大的牌也压不过就出小牌\n            //TODO 可以节约，出仅压过对方的大牌\n            return this.selectSingleBigerPoker(gameHost, roundHost, firstCard, pokerObj);\n        }\n    }\n\n    /**\n     * 顶牌逻辑\n     */\n    selectSingleBigerPoker(gameHost, roundHost, targetPoker, pokerObj) {\n        //出单的逻辑 1识别是否是主牌\n        let cardValue = targetPoker;\n        let typeValue = this.intGetType(cardValue);\n        let contentValue = this.intGetContent(cardValue);\n        let isHost = typeValue == gameHost || PokerUtil.quaryIsHost(contentValue);\n        if (isHost) {\n            //顶大牌\n            let array = this.selectArrayFrom(true, typeValue, pokerObj);\n            if (array.length > 0) {\n                let value = array[array.length - 1];\n                let result = PokerUtil.comparePoker(value, cardValue);\n                //能顶过 出大牌\n                if (result === LEFT_WIN) {\n                    return value;\n                } else {//顶不过 出小牌\n                    return array[0];\n                }\n            } else {\n                return pokerObj.total[pokerObj.total.length - 1];\n            }\n        } else {\n            //上家是否为A \n            let isA = contentValue == 14;\n            console.log(\"onion\", targetPoker + \"type\" + typeValue);\n            //自己是否还有该花色\n            let pokerArray = this.selectArrayFrom(false, typeValue, pokerObj);\n            if (pokerArray.length == 0) {\n                //出最小的牌杀\n                return pokerObj.hostArray[0];\n            } else if (isA) {\n                return pokerArray[0];\n            } else {\n                return pokerArray[pokerArray.length - 1];\n            }\n        }\n    }\n\n    /**\n     * 上分逻辑 小牌逻辑\n     */\n    selectSocerPoker(gameHost, roundHost, targetPoker, pokerObj) {\n        let cardValue = targetPoker;\n        let typeValue = this.intGetType(cardValue);\n        let contentValue = this.intGetContent(cardValue);\n        let isHost = typeValue == gameHost || PokerUtil.quaryIsHost(contentValue);\n        if (isHost) {\n            let array = this.selectArrayFrom(true, typeValue, pokerObj);\n            if (array.length > 0) {\n                return this.selectScoerFromArray(array);\n            }\n            //TODO 待优化 出最小的牌 当前是总牌库的第一张牌 \n            return pokerObj.total[0];\n        } else {\n            let array = this.selectArrayFrom(true, typeValue, pokerObj);\n            if (array.length > 0) {\n                //从该花色选牌\n                return this.selectScoerFromArray(array);\n            }\n            //全局选牌\n            array = pokerObj.total;\n            return this.selectScoerFromArray(array);\n        }\n    }\n\n    selectScoerFromArray(array) {\n        for (let i = 0; i < array.length; i++) {\n            let result = PokerUtil.quaryIsSocer(this.intGetContent(array[i]));\n            if (result) {\n                return array[i];\n            }\n        }\n        return array[0];\n    }\n\n    /**\n     * 选出对应的牌组\n     * @param {*} isHost  固定主数组\n     * @param {*} type    花色类型\n     * @param {*} pokerObj  牌组对象\n     */\n    selectArrayFrom(isHost, type, pokerObj) {\n        if (isHost) {\n            return pokerObj.hostArray;\n        }\n        switch (type) {\n            case 1:\n                return pokerObj.type1Array;\n            case 2:\n                return pokerObj.type2Array;\n            case 3:\n                return pokerObj.type3Array;\n            case 4:\n                return pokerObj.type4Array;\n        }\n\n    }\n\n    removePokerFromArray(gameHost, pokerNum, pokerObj) {\n        console.log(\"onion\",\"pokerNum\"+pokerNum);\n        let typeValue = this.intGetType(pokerNum);\n        let contentValue = this.intGetContent(pokerNum);\n        let isHost = typeValue == gameHost || PokerUtil.quaryIsHost(contentValue);\n        console.log(\"onion\",\"移除\"+typeValue+\"/\"+contentValue+\"/\"+isHost);\n        let array = this.selectArrayFrom(isHost, typeValue, pokerObj);\n        //分组数组删除\n        let index = array.indexOf(pokerNum);\n        array.splice(index, 1);\n        //全局数组删除\n        array = pokerObj.total;\n        index = array.indexOf(pokerNum);\n        array.splice(index, 1);\n    }\n\n    intGetType(cardValue) {\n        return Math.floor(cardValue % 10);\n\n    }\n\n    strGetType(cardValue) {\n        return cardValue.substring(2)\n    }\n\n    intGetContent(cardValue) {\n        return Math.floor(cardValue / 10);\n    }\n\n    strGetContent(cardValue) {\n        return cardValue.substring(0, 2);\n    }\n    isRealNum(val){\n        // isNaN()函数 把空串 空格 以及NUll 按照0来处理 所以先去除，\n        \n    　　if(val === \"\" || val ==null){\n            return false;\n    　　}\n       if(!isNaN(val)){　　　　\n    　　//对于空数组和只有一个数值成员的数组或全是数字组成的字符串，isNaN返回false，例如：'123'、[]、[2]、['123'],isNaN返回false,\n       //所以如果不需要val包含这些特殊情况，则这个判断改写为if(!isNaN(val) && typeof val === 'number' )\n    　　　 return true; \n    　　}\n    \n    　else{ \n    　　　　return false; \n    　　} \n    }\n\n}"]}